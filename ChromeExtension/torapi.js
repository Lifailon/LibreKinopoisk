function displayTorrentsOnPage() {

    let tableBackgroundColor = '#dddddd'; // –º—è–≥–∫–∏–π —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    let inputBackgroundColor = '#f0f0f0'; // –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–º–Ω–µ–µ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã
    let tableHeadBackgroundColor = '#e8e8e8'; // –±–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    let buttonBackgroundColor = '#0078d4'; // —Ñ–æ–Ω –∫–Ω–æ–ø–æ–∫, —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ (–º–µ–Ω–µ–µ —è—Ä–∫–∏–π —Å–∏–Ω–∏–π)
    let buttonColor = '#000000'; // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    let tableBorderBottomColor = "#dddddd"; // –º—è–≥–∫–∏–π —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã

    chrome.storage.local.get(['darkModeBox'], function (result) {
        if (result.darkModeBox) {
            tableBackgroundColor = '#2d2d2d'; // —Ñ–æ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
            inputBackgroundColor = '#333'// —Ñ–æ–Ω –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã
            tableHeadBackgroundColor = '#444'// —Ñ–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
            buttonBackgroundColor = '#1e90ff'; // —Ñ–æ–Ω –∫–Ω–æ–ø–æ–∫, —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
            buttonColor = '#ffffff'; // —Ü–≤–µ—Ç –±—É–∫–≤ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            tableBorderBottomColor = "#555555"
        }
    })

    chrome.storage.local.get(['TorApiServer'], function(result) {
        var TorApiServer = result.TorApiServer;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0,0,0,0.7)';
        modal.style.zIndex = '10000';
        modal.style.display = 'flex';
        modal.style.flexDirection = 'column';
        modal.style.alignItems = 'center';
        modal.style.justifyContent = 'center';
        modal.style.fontFamily = 'Lato, sans-serif'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.style.fontSize = '16px'; // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const tableContainer = document.createElement('div');
        tableContainer.style.width = '90%';
        tableContainer.style.height = '85%';
        tableContainer.style.backgroundColor = tableBackgroundColor;
        tableContainer.style.padding = '20px';
        tableContainer.style.borderRadius = '10px';
        tableContainer.style.overflowY = 'auto';
        tableContainer.style.position = 'relative';
        tableContainer.style.display = 'flex';
        tableContainer.style.flexDirection = 'column';
        tableContainer.style.fontFamily = 'Lato, sans-serif';
        tableContainer.style.fontSize = '16px';

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (–ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è) –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        const searchContainer = document.createElement('div');
        searchContainer.id = 'torrent-search-container';
        searchContainer.style.display = 'flex';
        // searchContainer.style.flexDirection = 'column';
        searchContainer.style.alignItems = 'center';
        searchContainer.style.marginBottom = '10px';
        searchContainer.style.gap = '10px';
        searchContainer.style.fontFamily = 'Lato, sans-serif';
        searchContainer.style.fontSize = '16px';

        // –°—Ç–∏–ª–∏ –¥–ª—è placeholder
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            /* –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            #torrent-table {
                width: 100%; /* –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ */
                border-collapse: collapse; /* –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏ */
            }
          
            #torrent-table th, #torrent-table td {
                text-align: left; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
            }
            
            /* –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
            @media (max-width: 1000px) {
                #torrent-table {
                    display: block; /* –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É */
                    overflow-x: auto; /* –í–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É */
                }
            
                #torrent-table thead {
                    display: none; /* –°–∫—Ä—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */
                }

                #category-counter {
                    display: none; /* –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—á–µ—Ç—á–∏–∫–∏ */
                }

                .category-counter {
                    display: none !important; /* –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å—á–µ—Ç—á–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –ø–æ –∫–ª–∞—Å—Å—É */
                }

                #torrent-table tr {
                    display: flex; /* –ò—Å–ø–æ–ª—å–∑—É–µ–º flexbox –¥–ª—è —Å—Ç—Ä–æ–∫ */
                    /* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —è—á–µ–µ–∫ */
                    /* flex-direction: column; */
                    flex-wrap: wrap; /* –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ç–µ–∫–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ */
                    margin-bottom: 15px; /* –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ */
                }
                    
                /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —è—á–µ–µ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ */
                .source-cell, .download-cell, .magnet-cell, .seeds-cell, .peers-cell {
                    display: flex; /* –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å flexbox –≤–Ω—É—Ç—Ä–∏ —è—á–µ–µ–∫ */
                    justify-content: flex-start; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é */
                }
                    
                /* –û—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏ –∑–∞–Ω–∏–º–∞—é—Ç 100% —à–∏—Ä–∏–Ω—ã */
                .name-cell, .category-cell, .size-cell, .date-cell {
                    flex: 1 1 100%; /* –ó–∞–Ω–∏–º–∞—é—Ç 100% —à–∏—Ä–∏–Ω—ã */
                }

                #torrent-search-container {
                    display: flex;
                    flex-direction: column; /* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
                }

                #torrent-search-button {
                    width: 100%; /* –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
                    margin-right: 10px; /* –£–±—Ä–∞—Ç—å –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
                    margin-bottom: 10px; /* –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */
                }

                #torrent-search-all-page-button {
                    width: 100%; /* –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
                    margin-right: 10px; /* –£–±—Ä–∞—Ç—å –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
                }
                    
                #torrent-filter-input {
                    margin-right: 10px; /* –£–±—Ä–∞—Ç—å –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
                }
            }
        `;
        document.head.appendChild(styleElement);
        
        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä—É—á–Ω—É—é
        const searchInput = document.createElement('input');
        searchInput.id = 'torrent-search-input';
        searchInput.type = 'text';
        searchInput.placeholder = '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é';
        searchInput.style.marginBottom = '10px';
        searchInput.style.padding = '10px';
        searchInput.style.borderRadius = '5px';
        searchInput.style.border = '1px solid #ddd';
        searchInput.style.width = '100%';
        searchInput.style.boxSizing = 'border-box';
        searchInput.style.flexGrow = '1';
        searchInput.style.height = '42px';
        searchInput.style.backgroundColor = inputBackgroundColor;
        searchInput.style.color = buttonColor;
        searchInput.style.fontFamily = 'Lato, sans-serif';
        searchInput.style.fontSize = '16px';

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ üîé
        const searchButton = document.createElement('button');
        searchButton.id = 'torrent-search-button';
        searchButton.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flexbox –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        searchButton.style.alignItems = 'center'; // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        searchButton.style.padding = '10px 20px';
        searchButton.style.backgroundColor = buttonBackgroundColor;
        searchButton.style.color = buttonColor;
        searchButton.style.border = 'none';
        searchButton.style.borderRadius = '5px';
        searchButton.style.cursor = 'pointer';
        searchButton.style.marginLeft = '5px'; // –æ—Ç—Å—Ç—É–ø—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (searchInput)
        searchButton.style.height = '42px';
        searchButton.style.lineHeight = '22px';
        searchButton.style.marginTop = '-10px';
        searchButton.style.fontFamily = 'Lato, sans-serif';
        searchButton.style.fontSize = '18px';
        searchButton.style.whiteSpace = 'nowrap';

        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingSpinner = document.createElement('div');
        loadingSpinner.style.width = '25px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
        loadingSpinner.style.height = '25px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        loadingSpinner.style.border = '4px solid #05cc63'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –≥—Ä–∞–Ω–∏—Ü—ã
        loadingSpinner.style.borderTop = '4px solid #ffffff'; // –¶–≤–µ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        loadingSpinner.style.borderRadius = '50%';
        loadingSpinner.style.animation = 'spin 1s linear infinite'; // –ê–Ω–∏–º–∞—Ü–∏—è
        loadingSpinner.style.display = 'none'; // –°–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        searchButton.appendChild(loadingSpinner); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–Ω–æ–ø–∫—É
        searchButton.appendChild(document.createTextNode('–ü–æ–∏—Å–∫')); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        searchButton.addEventListener('click', function() {
            const query = searchInput.value.trim();
            if (query) {
                loadingSpinner.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
                const originalText = searchButton.childNodes[1].textContent; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                searchButton.childNodes[1].textContent = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                searchButton.disabled = true; // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                searchButton.style.cursor = 'default'; // –û—Ç–∫–ª—é—á–∞–µ–º –∫—É—Ä—Å–æ—Ä
                searchAllPageButton.disabled = true;
                searchAllPageButton.style.cursor = 'default';
                // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ CORS Anywhere (https://github.com/Rob--W/cors-anywhere), –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS –∫ –∑–∞–ø—Ä–æ—Å–∞–º
                // const corsProxy = 'https://cors-anywhere.herokuapp.com/';
                // Thing Proxy (https://github.com/Freeboard/thingproxy)
                // const corsProxy = 'https://thingproxy.freeboard.io/fetch/';
                // fetch(corsProxy + apiUrl)
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                fetch(`${TorApiServer}/api/search/title/all?query=${query}`)
                    .then(response => response.json())
                    .then(data => {
                        displayTorrents(data);
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        const count = data.RuTracker.length + data.Kinozal.length + data.RuTor.length + data.NoNameClub.length;
                        textBox.innerHTML = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>${count}</strong> (RuTracker: <strong>${data.RuTracker.length}</strong>, Kinozal: <strong>${data.Kinozal.length}</strong>, RuTor: <strong>${data.RuTor.length}</strong>, NoName-Club: <strong>${data.NoNameClub.length}</strong>)`;
                    })
                    .catch(error => {
                        console.error(error);
                        textBox.innerHTML = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>0</strong> (RuTracker: <strong>0</strong>, Kinozal: <strong>0</strong>, RuTor: <strong>0</strong>, NoName-Club: <strong>0</strong>)';
                    })
                    .finally(() => {
                        loadingSpinner.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
                        searchButton.childNodes[1].textContent = originalText; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        searchButton.disabled = false; // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞
                        searchButton.style.cursor = 'pointer'; // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä
                        searchAllPageButton.disabled = false;
                        searchAllPageButton.style.cursor = 'pointer';
                    });
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        const searchAllPageButton = document.createElement('button');
        searchAllPageButton.id = 'torrent-search-all-page-button';
        searchAllPageButton.style.display = 'flex';
        searchAllPageButton.style.alignItems = 'center';
        searchAllPageButton.style.padding = '10px 20px';
        searchAllPageButton.style.backgroundColor = buttonBackgroundColor;
        searchAllPageButton.style.color = buttonColor;
        searchAllPageButton.style.border = 'none';
        searchAllPageButton.style.borderRadius = '5px';
        searchAllPageButton.style.cursor = 'pointer';
        searchAllPageButton.style.marginLeft = '5px';
        searchAllPageButton.style.height = '42px';
        searchAllPageButton.style.lineHeight = '22px';
        searchAllPageButton.style.marginTop = '-10px';
        searchAllPageButton.style.fontFamily = 'Lato, sans-serif';
        searchAllPageButton.style.fontSize = '18px';
        searchAllPageButton.style.whiteSpace = 'nowrap';

        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingSpinnerAllPage = document.createElement('div');
        loadingSpinnerAllPage.style.width = '25px';
        loadingSpinnerAllPage.style.height = '25px';
        loadingSpinnerAllPage.style.border = '4px solid #05cc63';
        loadingSpinnerAllPage.style.borderTop = '4px solid #ffffff';
        loadingSpinnerAllPage.style.borderRadius = '50%';
        loadingSpinnerAllPage.style.animation = 'spin 2s linear infinite';
        loadingSpinnerAllPage.style.display = 'none';
        searchAllPageButton.appendChild(loadingSpinnerAllPage);
        searchAllPageButton.appendChild(document.createTextNode('–ù–∞–π—Ç–∏ –≤—Å–µ'));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        searchAllPageButton.addEventListener('click', function() {
            const query = searchInput.value.trim();
            if (query) {
                loadingSpinnerAllPage.style.display = 'block';
                const originalText = searchAllPageButton.childNodes[1].textContent;
                searchAllPageButton.childNodes[1].textContent = ''
                searchAllPageButton.disabled = true;
                searchAllPageButton.style.cursor = 'default';
                searchButton.disabled = true;
                searchButton.style.cursor = 'default';
                fetch(`${TorApiServer}/api/search/title/all?query=${query}&page=all`)
                    .then(response => response.json())
                    .then(data => {
                        displayTorrents(data);
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        const count = data.RuTracker.length + data.Kinozal.length + data.RuTor.length + data.NoNameClub.length;
                        textBox.innerHTML = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>${count}</strong> (RuTracker: <strong>${data.RuTracker.length}</strong>, Kinozal: <strong>${data.Kinozal.length}</strong>, RuTor: <strong>${data.RuTor.length}</strong>, NoName-Club: <strong>${data.NoNameClub.length}</strong>)`;
                    })
                    .catch(error => {
                        console.error(error);
                        textBox.innerHTML = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>0</strong> (RuTracker: <strong>0</strong>, Kinozal: <strong>0</strong>, RuTor: <strong>0</strong>, NoName-Club: <strong>0</strong>)';
                    })
                    .finally(() => {
                        loadingSpinnerAllPage.style.display = 'none';
                        searchAllPageButton.childNodes[1].textContent = originalText;
                        searchAllPageButton.disabled = false;
                        searchAllPageButton.style.cursor = 'pointer';
                        searchButton.disabled = false;
                        searchButton.style.cursor = 'pointer';
                    });
            }
        });

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filterInput = document.createElement('input');
        filterInput.id = 'torrent-filter-input';
        filterInput.type = 'text';
        filterInput.placeholder = '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é';
        filterInput.style.marginBottom = '10px';
        filterInput.style.padding = '10px';
        filterInput.style.borderRadius = '5px';
        filterInput.style.border = '1px solid #ddd';
        filterInput.style.width = '100%';
        filterInput.style.boxSizing = 'border-box';
        filterInput.style.flexGrow = '1';
        filterInput.style.height = '42px';
        filterInput.style.marginLeft = '5px';
        filterInput.style.backgroundColor = inputBackgroundColor;
        filterInput.style.color = buttonColor;
        filterInput.style.fontFamily = 'Lato, sans-serif';
        filterInput.style.fontSize = '16px';

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        function highlightText(text, words) {
            if (!words.length) return text; // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            const regex = new RegExp(`(${words.join('|')})`, 'gi'); // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ–Ω–æ–º
            return text.replace(regex, '<span style="background-color: yellow;">$1</span>'); // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–≥ span —Å –∂–µ–ª—Ç—ã–º —Ñ–æ–Ω–æ–º
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filterInput.addEventListener('input', function() {
            const filterValue = filterInput.value.toLowerCase();
            let filterWords = [];
            chrome.storage.local.get(['SearchCheckBox'], function (result) {
                if (result.SearchCheckBox) {
                    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    filterWords = filterValue.split(' ').filter(word => word.length > 0);
                }
                const rows = tableBody.querySelectorAll('tr');
                let visibleCount = 0; // –°—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
                // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                let countRuTracker = 0;
                let countKinozal = 0;
                let countRuTor = 0;
                let countNoNameClub = 0;
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                const selectedCategory = dropdown.value;
                rows.forEach(row => {
                    const titleCell = row.querySelectorAll('td')[3]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    const providerCell = row.querySelectorAll('td')[0]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    const categoryCell = row.querySelectorAll('td')[4]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—è—Ç—É—é —è—á–µ–π–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const categoryText = categoryCell ? categoryCell.textContent.trim() : '';
                    if (titleCell && providerCell) {
                        const linkElement = titleCell.querySelector('a'); // –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
                        const titleText = linkElement ? linkElement.textContent.toLowerCase() : titleCell.textContent.toLowerCase();
                        const providerText = providerCell.textContent.trim(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                        let matches = false;
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                        if (selectedCategory !== '–í—Å–µ' && categoryText !== selectedCategory) {
                            row.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        } else {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
                            if (result.SearchCheckBox) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                                matches = filterWords.every(word => titleText.includes(word));
                            } else {
                                // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                                matches = titleText.includes(filterValue);
                            }
                            if (matches) {
                                row.style.display = ''; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                                visibleCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                                if (providerText === 'RuTracker') countRuTracker++;
                                if (providerText === 'Kinozal') countKinozal++;
                                if (providerText === 'RuTor') countRuTor++;
                                if (providerText === 'NoNameClub') countNoNameClub++;
                                // –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫–µ
                                if (linkElement) {
                                    linkElement.innerHTML = highlightText(linkElement.textContent, filterWords);
                                }
                            } else {
                                row.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                                if (linkElement) {
                                    linkElement.innerHTML = linkElement.textContent; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                                }
                            }
                        }
                    }
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                textBox.innerHTML = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>${visibleCount}</strong> (RuTracker: <strong>${countRuTracker}</strong>, Kinozal: <strong>${countKinozal}</strong>, RuTor: <strong>${countRuTor}</strong>, NoName-Club: <strong>${countNoNameClub}</strong>)`;
            });
        });

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        const table = document.createElement('table');
        table.id = 'torrent-table';
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';
        table.style.color = buttonColor;
        table.style.fontFamily = 'Lato, sans-serif';
        table.style.fontSize = '18px';

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        const tableHead = document.createElement('thead');
        tableHead.innerHTML = `
            <tr style="background-color: ${tableHeadBackgroundColor};">
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–¢—Ä–µ–∫–µ—Ä</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;"></th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;"></th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–†–∞–∑–º–µ—Ä</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–°–∏–¥—ã</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–ü–∏—Ä—ã</th>
                <th style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 18px; text-align: center; font-weight: bold;">–î–∞—Ç–∞</th>
            </tr>
        `;
        table.appendChild(tableHead);

        // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        function sortTable(columnIndex, ascending) {
            const rows = Array.from(tableBody.querySelectorAll('tr'));
            rows.sort((a, b) => {
                let cellA = a.querySelectorAll('td')[columnIndex].textContent.trim().toLowerCase();
                let cellB = b.querySelectorAll('td')[columnIndex].textContent.trim().toLowerCase();
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
                if (isDate(cellA) && isDate(cellB)) {
                    cellA = parseDate(cellA);
                    cellB = parseDate(cellB);
                }
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                else if (cellA.includes('kb') || cellA.includes('mb') || cellA.includes('gb')) {
                    cellA = parseFileSize(cellA);
                    cellB = parseFileSize(cellB);
                }
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Ü–µ–ª–æ–µ –∏–ª–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)
                else if (!isNaN(cellA) && !isNaN(cellB)) {
                    cellA = parseFloat(cellA);
                    cellB = parseFloat(cellB);
                }
                // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                if (cellA < cellB) {
                    return ascending ? -1 : 1;
                } else if (cellA > cellB) {
                    return ascending ? 1 : -1;
                } else {
                    return 0;
                }
            });
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            rows.forEach(row => tableBody.appendChild(row));
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
        function parseFileSize(size) {
            const units = {
                'b': 1,
                'kb': 1024,
                'mb': 1024 ** 2,
                'gb': 1024 ** 3
            };
            const match = size.match(/(\d+(\.\d+)?)(\s*)([kmgt]?b)/i);
            if (match) {
                const value = parseFloat(match[1]);
                const unit = match[4].toLowerCase();
                return value * (units[unit] || 1);
            }
            return 0;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy
        function isDate(str) {
            return /^\d{2}\.\d{2}\.\d{4}$/.test(str);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç Date (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)
        function parseDate(dateStr) {
            const [day, month, year] = dateStr.split('.');
            return new Date(`${year}-${month}-${day}`);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const tableHeaders = tableHead.querySelectorAll('th');
        tableHeaders.forEach((header, index) => {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            let ascending = true;
            header.addEventListener('click', () => {
                sortTable(index, ascending);
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                ascending = !ascending;
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        searchContainer.appendChild(searchInput);
        searchContainer.appendChild(searchButton);
        searchContainer.appendChild(searchAllPageButton);
        searchContainer.appendChild(filterInput);

        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        setTimeout(() => {
            searchInput.focus(); 
        })

        // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        searchInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Enter
                searchButton.click(); // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ tableContainer
        tableContainer.appendChild(searchContainer);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        const statusContainer = document.createElement('div');
        statusContainer.id = 'category-counter';
        statusContainer.classList.add('category-counter');
        statusContainer.style.display = 'flex';
        statusContainer.style.alignItems = 'center';
        statusContainer.style.backgroundColor = tableBackgroundColor;
        statusContainer.style.width = '100%';
        statusContainer.style.paddingBottom = '20px'; // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É

        // –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        // if (window.innerWidth < 1000) {
        //     statusContainer.style.display = 'none';
        // }

        // –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
        const filterLabel = document.createElement('span');
        filterLabel.textContent = '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:';
        filterLabel.style.fontFamily = 'Lato, sans-serif';
        filterLabel.style.fontSize = '16px';
        filterLabel.style.marginRight = '10px'; // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        filterLabel.style.color = buttonColor;
            
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
        statusContainer.appendChild(filterLabel);
            
        // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        const dropdown = document.createElement('select');
        dropdown.style.fontFamily = 'Lato, sans-serif';
        dropdown.style.fontSize = '16px'; // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        dropdown.style.padding = '3px'; // –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–∞
        dropdown.style.borderRadius = '5px'; // –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        dropdown.style.border = `1px solid ${buttonColor}`; // –¢–æ–ª—â–∏–Ω–∞ –∏ —Ü–≤–µ—Ç –æ–∫–Ω–∞
        // dropdown.style.width = 'auto'; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        dropdown.style.minWidth = '150px'; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        dropdown.style.maxWidth = '150px'; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        dropdown.style.marginRight = '10px'; // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        dropdown.style.backgroundColor = tableBackgroundColor;
        dropdown.style.color = buttonColor;
            
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const allOption = document.createElement('option');
        allOption.value = '–í—Å–µ';
        allOption.textContent = '–í—Å–µ';
        dropdown.appendChild(allOption);
            
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        statusContainer.appendChild(dropdown);
            
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        const textBox = document.createElement('div');
        textBox.innerHTML = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>0</strong> (RuTracker: <strong>0</strong>, Kinozal: <strong>0</strong>, RuTor: <strong>0</strong>, NoName-Club: <strong>0</strong>)';
        textBox.style.color = buttonColor;
            
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        statusContainer.appendChild(textBox);
            
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        tableContainer.appendChild(statusContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
        dropdown.addEventListener('change', function() {
            const selectedCategory = dropdown.value; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            filterByCategory(selectedCategory); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        function filterByCategory(selectedCategory) {
            const rows = tableBody.querySelectorAll('tr');
            let visibleCount = 0; // –°—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
            // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            let countRuTracker = 0;
            let countKinozal = 0;
            let countRuTor = 0;
            let countNoNameClub = 0;
            rows.forEach(row => {
                const categoryCell = row.querySelectorAll('td')[4]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—è—Ç—É—é —è—á–µ–π–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const providerCell = row.querySelectorAll('td')[0]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                const categoryText = categoryCell ? categoryCell.textContent.trim() : '';
                const providerText = providerCell ? providerCell.textContent.trim() : '';
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                if (selectedCategory === '–í—Å–µ' || categoryText === selectedCategory) {
                    row.style.display = ''; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                    visibleCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    if (providerText === 'RuTracker') countRuTracker++;
                    if (providerText === 'Kinozal') countKinozal++;
                    if (providerText === 'RuTor') countRuTor++;
                    if (providerText === 'NoNameClub') countNoNameClub++;
                } else {
                    row.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                }
            });
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            updateVisibleCount(visibleCount, countRuTracker, countKinozal, countRuTor, countNoNameClub);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á
        function updateVisibleCount(visibleCount, countRuTracker, countKinozal, countRuTor, countNoNameClub) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            textBox.innerHTML = `
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á: <strong>${visibleCount}</strong>
                (RuTracker: <strong>${countRuTracker}</strong>, 
                Kinozal: <strong>${countKinozal}</strong>, 
                RuTor: <strong>${countRuTor}</strong>, 
                NoName-Club: <strong>${countNoNameClub}</strong>)
            `;
        }

        // –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        const tableBody = document.createElement('tbody');
        table.appendChild(tableBody);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        tableContainer.appendChild(table);

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeButton = document.createElement('span');
        closeButton.textContent = '√ó';
        closeButton.style.position = 'absolute';
        closeButton.style.top = '5px';
        closeButton.style.right = '20px';
        closeButton.style.color = '#ffffff';
        closeButton.style.cursor = 'pointer';
        closeButton.style.fontFamily = 'Lato, sans-serif';
        closeButton.style.fontSize = '40px';
        closeButton.addEventListener('click', function() {
            document.body.removeChild(modal);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.appendChild(tableContainer);
        modal.appendChild(closeButton);
        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Esc –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                document.body.removeChild(modal);
            }
        });
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function displayTorrents(data) {
        const tableBody = document.querySelector('#torrent-table tbody');
        tableBody.innerHTML = '';
        // –û—á–∏—â–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–∑–¥–∞–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        const dropdown = document.querySelector('select'); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        dropdown.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        const uniqueCategories = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        uniqueCategories.add('–í—Å–µ');
        uniqueCategories.add('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ü–∏–∫–ª–µ
        for (let source in data) {
            if (data.hasOwnProperty(source)) {
                const torrents = data[source];
                torrents.forEach(item => {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ Set
                    uniqueCategories.add(item?.Category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    const row = document.createElement('tr');
                    row.style.backgroundColor = inputBackgroundColor;
                    row.style.borderBottom = `1px solid ${tableBorderBottomColor}`;
                    row.style.fontFamily = 'Lato, sans-serif';
                    row.style.fontSize = '16px';
                    let ico
                    if (source.toLowerCase().trim() === "rutracker") {
                        ico = chrome.runtime.getURL('icons/rutracker.ico');
                    } else if (source.toLowerCase() === "kinozal") {
                        ico = chrome.runtime.getURL('icons/kinozal.ico');
                    } else if (source.toLowerCase() === "rutor") {
                        ico = chrome.runtime.getURL('icons/rutor.ico');
                    } else if (source.toLowerCase() === "nonameclub") {
                        ico = chrome.runtime.getURL('icons/nonameclub.ico');
                    }
                    row.innerHTML = `
                        <td class="source-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            <div style="display: flex; align-items: center; height: 100%;"> <!-- –ò—Å–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≤—ã—Å–æ—Ç–∞ 100% –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è -->
                                <img src="${ico}" alt="${source}" style="max-width: 16px; margin-right: 16px;">
                                <span>${source}</span>
                            </div>
                        </td>
                        <td class="download-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                                <a href="${item.Torrent}" target="_blank" style="color: ${buttonBackgroundColor}; text-decoration: none;">üíæ</a>
                        </td>
                        <td class="magnet-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                                <magnetButton></magnetButton>
                        </td>
                        <td class="name-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: pointer; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            <a href="${item.Url}" target="_blank" style="color: ${buttonBackgroundColor}; text-decoration: none;">${item.Name}</a>
                        </td>
                        <td class="category-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            ${item?.Category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                        </td>
                        <td class="size-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            ${item.Size}
                        </td>
                        <td class="seeds-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            ${item.Seeds}
                        </td>
                        <td class="peers-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            ${item.Peers}
                        </td>
                        <td class="date-cell" style="padding: 10px; border-bottom: 1px solid ${tableBorderBottomColor}; cursor: default; font-family: Lato, sans-serif; font-size: 16px; vertical-align: middle;">
                            ${item.Date.split(' ')[0].includes(':') ? item.Date.split(':')[0].slice(0, -2) : item.Date.split(' ')[0]}
                        </td>
                    `;
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Magnet link
                    const magnetButton = row.querySelector('magnetButton');
                    magnetButton.style.padding = '0'; // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
                    magnetButton.style.background = 'none'; // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
                    magnetButton.style.border = 'none'; // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É
                    magnetButton.style.fontSize = '16px'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∏–º–≤–æ–ª–∞
                    magnetButton.style.color = buttonBackgroundColor; // –¶–≤–µ—Ç —Å–∏–º–≤–æ–ª–∞
                    magnetButton.style.cursor = 'pointer'; // –ö—É—Ä—Å–æ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ 
                    magnetButton.innerHTML = 'üß≤';
                    magnetButton.addEventListener('click', function() {
                        fetch(`https://torapi.vercel.app/api/search/id/${source.toLowerCase()}?query=${item.Id}`)
                            .then(response => response.json())
                            .then(magnetData => {
                                const magnetLink = magnetData[0].Magnet;
                                if (magnetLink) {
                                    chrome.storage.local.get(['MagnetCheckBox'], function (result) {
                                        if (result.MagnetCheckBox) {
                                            window.open(magnetLink, '_blank');
                                        } else {
                                            const infoHash = magnetData[0].Hash
                                            if (infoHash) {
                                                navigator.clipboard.writeText(infoHash).then(() => {
                                                    alert(`–•–µ—à ${infoHash} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`);
                                                }).catch(error => {
                                                    alert(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (${error})`);
                                                });
                                            }
                                        }
                                    })
                                } else {
                                    alert('–ú–∞–≥–Ω–∏—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                                }
                            })
                            .catch(error => {
                                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–Ω–∏—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ (${error})`);
                            });
                    });
                    tableBody.appendChild(row);
                });
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        uniqueCategories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            dropdown.appendChild(option);
        });
    }
}